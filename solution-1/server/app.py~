import async_timeout
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import redis.asyncio as aioredis
from os import getenv
import uvicorn
import asyncio
from event_source import EventSource
import json
from threading import Thread

redis_host = getenv("REDIS_HOST", "localhost")
redis_port = int(getenv("REDIS_PORT", 6379))
host_addr = getenv("HOST_IP", "localhost")

app = FastAPI()
es = EventSource()


async def listener():
    client = aioredis.from_url(f"redis://{redis_host}:{redis_port}")
    while True:
        try:
            async with async_timeout.timeout(50):
                req = await client.lpop("req-sol-1")
                if req is None:
                    continue

                req_jsml = json.loads(req)
                data = req_jsml["data"]
                id = req_jsml["id"]

                es.newStream(id)

                await client.publish(
                    "res-sol-1",
                    json.dumps({"id": id, "podAddr": "http://" + host_addr + ":8000"}),
                )

                asyncio.create_task(proceed_request(id, data))

        except asyncio.TimeoutError:
            pass


async def proceed_request(id, data: str):
    await asyncio.sleep(150)
    print(f"Processing request {id}, data: {data}")
    STATIC_STRING = "Lorem ipsum dolor sit amet, qui minim labore adipisicing minim sint cillum sint consectetur cupidatat. Exercitation laborum, in amet"
    for word in STATIC_STRING.split():
        await es.add(id, word)
    await es.add(id, "<end>")

async def event_generator(id):
    await asyncio.sleep(50)
    async for item in es.listen(id):
        print(f"Sending {item}")
        yield item

@app.get("/stream/{id}", response_class=StreamingResponse)
async def read_item(id: str):
    print(f"Requesting stream {id}")
    return StreamingResponse(event_generator(id), media_type="text/plain")


def start_listener(loop):
    asyncio.set_event_loop(loop)
    loop.run_until_complete(listener())

if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    listener_thread = Thread(target=start_listener, args=(loop,))
    listener_thread.start()

    uvicorn.run(app, host="0.0.0.0", port=8000)
